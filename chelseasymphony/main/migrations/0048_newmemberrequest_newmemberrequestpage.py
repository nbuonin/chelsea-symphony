# Generated by Django 2.2.4 on 2019-08-31 03:38

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks
import wagtailmetadata.models


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailimages', '0001_squashed_0021'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('main', '0047_auto_20190830_1453'),
    ]

    operations = [
        migrations.CreateModel(
            name='NewMemberRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('first_name', models.CharField(max_length=254)),
                ('last_name', models.CharField(max_length=254)),
                ('email', models.EmailField(max_length=254)),
                ('instrument', models.CharField(choices=[('violin', 'Violin'), ('viola', 'Viola'), ('cello', 'Cello'), ('bass', 'Bass'), ('harp', 'Harp'), ('flute', 'Flute'), ('oboe', 'Oboe'), ('clarinet', 'Clarinet'), ('bassoon', 'Bassoon'), ('horn', 'Horn'), ('trumpet', 'Trumpet'), ('trombone', 'Trombone'), ('tuba', 'Tuba'), ('percussion', 'Percussion'), ('piano', 'Piano')], max_length=254)),
                ('resume', models.FileField(upload_to='resumes/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'txt'])])),
                ('source', models.CharField(choices=[('performance', 'Attended a performance'), ('musician', 'From a TCS musician'), ('search', 'Internet search'), ('mozart_in_the_jungle', 'Mozart in the Jungle'), ('other', 'Other')], max_length=254)),
                ('link', models.URLField(blank=True)),
                ('read_policies', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='NewMemberRequestPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('repeat_in_subnav', models.BooleanField(default=False, help_text="If checked, a link to this page will be repeated alongside it's direct children when displaying a sub-navigation for this page.", verbose_name='repeat in sub-navigation')),
                ('repeated_item_text', models.CharField(blank=True, help_text="e.g. 'Section home' or 'Overview'. If left blank, the page title will be used.", max_length=255, verbose_name='repeated item link text')),
                ('body', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())])),
                ('thank_you_text', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.images.blocks.ImageChooserBlock())])),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Search image')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtailmetadata.models.MetadataMixin, 'wagtailcore.page', models.Model),
        ),
    ]
